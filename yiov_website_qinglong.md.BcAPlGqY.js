import{_ as i,c as t,a4 as a,o as n}from"./chunks/framework.CyeRpf1z.js";const e="/qinglong/qinglong-01.png",p="/qinglong/qinglong-02.png",h="/qinglong/qinglong-03.png",l="/qinglong/qinglong-04.png",k="/qinglong/qinglong-05.png",o="/qinglong/qinglong-06.png",r="/qinglong/qinglong-07.png",d="/qinglong/qinglong-08.png",g="/qinglong/qinglong-09.png",u="/qinglong/qinglong-10.png",c="/qinglong/qinglong-11.png",y="/qinglong/qinglong-12.png",E="/qinglong/qinglong-13.png",F="/qinglong/qinglong-14.png",m="/qinglong/qinglong-15.png",q="/qinglong/qinglong-16.png",w=JSON.parse('{"title":"青龙面板的安装及使用","description":"","frontmatter":{},"headers":[],"relativePath":"yiov/website/qinglong.md","filePath":"yiov/website/qinglong.md","lastUpdated":1734431113000}'),C={name:"yiov/website/qinglong.md"};function b(f,s,B,D,v,A){return n(),t("div",null,s[0]||(s[0]=[a('<h1 id="青龙面板的安装及使用" tabindex="-1">青龙面板的安装及使用 <a class="header-anchor" href="#青龙面板的安装及使用" aria-label="Permalink to &quot;青龙面板的安装及使用&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">(当前界面文档全部来自yiov.top)</p><ul><li><a href="https://yiov.top/" target="_blank" rel="noreferrer">yiov</a>「伊奥&#39;s 教程集」</li></ul></div><h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h2><p>一个支持 Python3、JavaScript、Shell、Typescript 的定时任务管理平台</p><p>仓库：<a href="https://github.com/whyour/qinglong" target="_blank" rel="noreferrer">https://github.com/whyour/qinglong</a></p><p>镜像：<a href="https://hub.docker.com/r/whyour/qinglong" target="_blank" rel="noreferrer">https://hub.docker.com/r/whyour/qinglong</a></p><p>tg群：<a href="https://t.me/jiao_long" target="_blank" rel="noreferrer">https://t.me/jiao_long</a></p><p><img src="'+e+`" alt="" loading="lazy"></p><h2 id="准备条件" tabindex="-1">准备条件 <a class="header-anchor" href="#准备条件" aria-label="Permalink to &quot;准备条件&quot;">​</a></h2><ul><li><p><a href="./Server/">服务器</a></p></li><li><p><a href="./shell/">shell工具</a></p></li><li><p><a href="./docker.html">安装docker</a></p></li></ul><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2><h3 id="拉取镜像" tabindex="-1">拉取镜像 <a class="header-anchor" href="#拉取镜像" aria-label="Permalink to &quot;拉取镜像&quot;">​</a></h3><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> whyour/qinglong:latest</span></span></code></pre></div><p><img src="`+p+`" alt="" loading="lazy"></p><h3 id="创建容器" tabindex="-1">创建容器 <a class="header-anchor" href="#创建容器" aria-label="Permalink to &quot;创建容器&quot;">​</a></h3><p>冒号前的 <code>5700</code> 是映射端口建议改，冒号后的 5700 是监听端口，尽量不要动</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -dit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -v</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $PWD</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/ql/data:/ql/data</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 冒号后面的 5700 为默认端口，如果设置了 QlPort, 需要跟 QlPort 保持一致</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 5700:5700</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 部署路径非必须，比如 /test</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> QlBaseUrl=&quot;/&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 部署端口非必须，当使用 host 模式时，可以设置服务启动后的端口，默认 5700</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> QlPort=&quot;5700&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> qinglong</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --hostname</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> qinglong</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --restart</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> unless-stopped</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  whyour/qinglong:latest</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">说明</p><p>我这里端口改成了 <code>5600</code></p></div><p><img src="`+h+'" alt="" loading="lazy"></p><h3 id="重启防火墙" tabindex="-1">重启防火墙 <a class="header-anchor" href="#重启防火墙" aria-label="Permalink to &quot;重启防火墙&quot;">​</a></h3><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> firewalld</span></span></code></pre></div><p><img src="'+l+'" alt="" loading="lazy"></p><h3 id="放行端口" tabindex="-1">放行端口 <a class="header-anchor" href="#放行端口" aria-label="Permalink to &quot;放行端口&quot;">​</a></h3><p>放行5700端口，另外 <a href="./Server/tencent.html#防火墙">服务器里的端口(安全组/防火墙)</a> 也要放行</p><div class="tip custom-block"><p class="custom-block-title">说明</p><p>如果你映射端口改了，请放行更改后的映射端口</p></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">firewall-cmd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --zone=public</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --add-port=5600/tcp</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --permanent</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">firewall-cmd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --zone=public</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --add-port=5700/tcp</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --permanent</span></span></code></pre></div><p><img src="'+k+'" alt="" loading="lazy"></p><h2 id="登录面板" tabindex="-1">登录面板 <a class="header-anchor" href="#登录面板" aria-label="Permalink to &quot;登录面板&quot;">​</a></h2><h3 id="访问" tabindex="-1">访问 <a class="header-anchor" href="#访问" aria-label="Permalink to &quot;访问&quot;">​</a></h3><p>青龙面板地址：<code>http://你的公网ip:端口</code></p><details class="details custom-block"><summary>网页打不开？</summary><p>请检查，是否开启对应的端口！</p><p>虚拟机请安装 <a href="./BT.html">宝塔面板</a> 后查看端口是否放行，再次访问即可</p></details><p><img src="'+o+'" alt="" loading="lazy"></p><p>开始安装-设置账户密码-提交</p><div class="tip custom-block"><p class="custom-block-title">说明</p><p>通知可以先跳过，之后再添加，完成即可</p></div><p><img src="'+r+'" alt="" loading="lazy"></p><p>登录青龙，进入青龙前端</p><p><img src="'+d+'" alt="" loading="lazy"></p><p><img src="'+g+`" alt="" loading="lazy"></p><h3 id="命令" tabindex="-1">命令 <a class="header-anchor" href="#命令" aria-label="Permalink to &quot;命令&quot;">​</a></h3><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 更新并重启青龙</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ql</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看日志</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> logs</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> qinglong</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                                    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 运行自定义脚本extra.sh</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ql</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> extra</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                                     </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 添加单个脚本文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ql</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> raw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">file_ur</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">l</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                             </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 添加单个仓库的指定脚本</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ql</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> repo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">repo_ur</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">l</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">whitelis</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">blacklis</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">dependenc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">branc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">h</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">extension</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 删除旧日志</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ql</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rmlog</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">day</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                              </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 启动tg-bot</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ql</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                                       </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 检测青龙环境并修复</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ql</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> check</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                                     </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 重置登录错误次数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ql</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> resetlet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                                  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 禁用两步登录</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ql</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> resettfa</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                                  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">---</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 依次执行，如果设置了随机延迟，将随机延迟一定秒数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">task</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">file_pat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">h</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                             </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 依次执行，无论是否设置了随机延迟，均立即运行，前台会输出日，同时记录在日志文件中</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">task</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">file_pat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">h</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> now</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                         </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 并发执行，无论是否设置了随机延迟，均立即运行，前台不产生日，直接记录在日志文件中，且可指定账号执行</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">task</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">file_pat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">h</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> conc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">env_nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">account_numbe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&gt;(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">可选的</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 指定账号执行，无论是否设置了随机延迟，均立即运行 </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">task</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">file_pat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">h</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> desi</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">env_nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">account_numbe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">r</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 设置任务超时时间   </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">task</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">max_tim</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">file_pat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">h</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用 -- 分割，-- 后面的参数会传给脚本，下面的例子，脚本就可接收到参数 -u whyour -p password</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">task</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">file_pat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">h</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> whyour</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> password</span></span></code></pre></div><h2 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-label="Permalink to &quot;使用&quot;">​</a></h2><h3 id="拉库" tabindex="-1">拉库 <a class="header-anchor" href="#拉库" aria-label="Permalink to &quot;拉库&quot;">​</a></h3><p>右上角，添加任务</p><p><img src="`+u+'" alt="" loading="lazy"></p><p>拉取库脚本文件，就用faker的京东脚本演示</p><p>faker3内部互助版</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ql repo https://ghproxy.com/https://github.com/shufflewzc/faker3.git &quot;jd_|jx_|gua_|jddj_|jdCookie&quot; &quot;activity|backUp&quot; &quot;^jd[^_]|USER|function|utils|sendNotify|ZooFaker_Necklace.js|JDJRValidator_|sign_graphics_validate|ql|JDSignValidator|magic|depend|h5sts&quot; &quot;main&quot;</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">说明</p><p>这里添加后先禁用，了解 <a href="#其他拓展">cron定时规则</a> 再来改</p></div><p><img src="'+c+'" alt="" loading="lazy"></p><p>确定好之后，点确定，之后运行，等待一会再刷新</p><p><img src="'+y+'" alt="" loading="lazy"></p><p>多等一会，以免有些脚本没有加载</p><p><img src="'+E+`" alt="" loading="lazy"></p><h3 id="安装依赖" tabindex="-1">安装依赖 <a class="header-anchor" href="#安装依赖" aria-label="Permalink to &quot;安装依赖&quot;">​</a></h3><p>依赖管理 - <code>Nodejs</code> ，自动拆分 <code>是</code></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>png-js</span></span>
<span class="line"><span>@types/node  </span></span>
<span class="line"><span>require</span></span>
<span class="line"><span>typescript</span></span>
<span class="line"><span>crypto-js</span></span>
<span class="line"><span>prettytable</span></span>
<span class="line"><span>dotenv</span></span>
<span class="line"><span>jsdom</span></span>
<span class="line"><span>date-fns</span></span>
<span class="line"><span>tough-cookie</span></span>
<span class="line"><span>tslib</span></span>
<span class="line"><span>ws@7.4.3</span></span>
<span class="line"><span>ts-md5</span></span>
<span class="line"><span>jsdom -g</span></span>
<span class="line"><span>jieba</span></span>
<span class="line"><span>fs</span></span>
<span class="line"><span>form-data</span></span>
<span class="line"><span>json5</span></span>
<span class="line"><span>global-agent </span></span>
<span class="line"><span>png-js</span></span>
<span class="line"><span>@types/node  </span></span>
<span class="line"><span>require</span></span>
<span class="line"><span>typescript</span></span>
<span class="line"><span>js-base64</span></span>
<span class="line"><span>axios</span></span></code></pre></div><p><img src="`+F+`" alt="" loading="lazy"></p><p>依赖管理 - <code>Python3</code> 我是直接失败的，实在想装参考下面步骤</p><div class="tip custom-block"><p class="custom-block-title">说明</p><p><code>qinglong</code> 为容器名</p></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exec</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> qinglong</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bash</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -sS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://bootstrap.pypa.io/get-pip.py</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> python3</span></span></code></pre></div><p>然后再执行下列依赖即可</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>requests</span></span>
<span class="line"><span>canvas</span></span>
<span class="line"><span>ping3</span></span>
<span class="line"><span>jieba</span></span>
<span class="line"><span>PyExecJS</span></span>
<span class="line"><span>aiohttp</span></span>
<span class="line"><span>json5</span></span>
<span class="line"><span>pycryptodomex</span></span></code></pre></div><p>依赖管理 - <code>Linux</code> 安装也很简单</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>bizCode</span></span>
<span class="line"><span>bizMsg  </span></span>
<span class="line"><span>lxml</span></span></code></pre></div><h3 id="环境变量" tabindex="-1">环境变量 <a class="header-anchor" href="#环境变量" aria-label="Permalink to &quot;环境变量&quot;">​</a></h3><p>京东的话，这里就是添加CK账号；其他APP就按脚本说明来</p><p>添加变量 - 名称输入 <code>JD_COOKIE</code> ，值输入账号CK</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>JD_COOKIE</span></span></code></pre></div><p><img src="`+m+'" alt="" loading="lazy"></p><p>这样就是添加成功了</p><p><img src="'+q+`" alt="" loading="lazy"></p><h2 id="其他拓展" tabindex="-1">其他拓展 <a class="header-anchor" href="#其他拓展" aria-label="Permalink to &quot;其他拓展&quot;">​</a></h2><details class="details custom-block"><summary>其他运行指令</summary><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 并发</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">task</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ***</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.js</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> conc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> JD_COOKIE</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 指定运行</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">task</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ***</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.js</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> desi</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> JD_COOKIE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 1-31</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 更新面板</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ql</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 删除日志</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ql</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rmlog</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 7</span></span></code></pre></div></details><details class="details custom-block"><summary>Cron定时规则</summary><p>青龙默认定时规则为5组数字，秒为可选项目，不填</p><table tabindex="0"><thead><tr><th><strong>分</strong></th><th><strong>时</strong></th><th><strong>天（日）</strong></th><th><strong>月</strong></th><th><strong>周</strong></th></tr></thead><tbody><tr><td>0-59</td><td>0-23</td><td>1-31</td><td>1-12</td><td>0-7</td></tr></tbody></table><p>注：周里的0和7都代表星期天</p><p>而常用的特殊符号表达式，是最关键的了</p><table tabindex="0"><thead><tr><th>*</th><th><strong>,</strong></th><th><strong>-</strong></th><th><strong>/</strong></th></tr></thead><tbody><tr><td>代表所有时间段</td><td>分隔时段</td><td>时间范围</td><td>每个单位间隔</td></tr></tbody></table><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>* 例子1：0 */2 8 8 *</span></span>
<span class="line"><span></span></span>
<span class="line"><span>我们参照例子解读</span></span>
<span class="line"><span>分=0；时=*/2；天＝8；月＝8；周＝*；</span></span>
<span class="line"><span></span></span>
<span class="line"><span>解读：8月8号的所有时间段每隔2小时运行一次</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>* 例子2：0 0-22/8 * * *</span></span>
<span class="line"><span></span></span>
<span class="line"><span>我们参照例子解读</span></span>
<span class="line"><span>分=0；时=0-22/8；天＝*；月＝*；周＝*；</span></span>
<span class="line"><span></span></span>
<span class="line"><span>解读：每天的0-22点之间，每隔8小时运行一次</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>* 例子3：0 0,10,22 * * *</span></span>
<span class="line"><span></span></span>
<span class="line"><span>我们参照例子解读</span></span>
<span class="line"><span>分=0；时=0,10,22；天＝*；月＝*；周＝*；</span></span>
<span class="line"><span></span></span>
<span class="line"><span>解读：每天的0点，10点，22点，运行一次</span></span></code></pre></div></details><details class="details custom-block"><summary>青龙通知修改</summary><p>每个脚本运行完成后，通知下方会有一个链接</p><div class="tip custom-block"><p class="custom-block-title">通知</p><p><code>本通知 By：https://github.com/whyour/qinglong</code></p></div><p>路径 <code>/root/ql/scripts/sendNotify.js</code></p><p>右键-编辑，下滑找到，我们将n后面的修改成自己想要的即可</p><div class="language-diff vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">diff</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">- author = &#39;\\n\\n本通知 By：https://github.com/whyour/qinglong&#39;,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">+ author = &#39;\\n\\n 活动入口:&lt;a href=&quot;https://github.com/yiov&quot;&gt;https://github.com/yiov&lt;/a&gt;&#39;,</span></span></code></pre></div></details><details class="details custom-block"><summary>青龙多开容器</summary><p>文字部分，自己修改一下</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -dit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -v</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $PWD</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/自定义目录不能与已有目录重名/data:/ql/data</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 自定义青龙端口后面的不要改:5700</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 自定义的容器名不能与已有容器重名</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --hostname</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 上面自定义的容器名</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --restart</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> unless-stopped</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  whyour/qinglong:latest</span></span></code></pre></div></details><details class="details custom-block"><summary>自己写通知脚本</summary><ul><li>简单版本</li></ul><p>设定的message值等于空，推送的时候就会为空，如果你不设定message，通知就无法调起</p><p>我们可以设一个message值等于空，然后在引用message的时候，在后面添加想要的文字</p><p><code>\${message}\\n\\n 这里填想要的文字</code></p><p>注意：<code>\\n</code> 代表换行</p><details class="details custom-block"><summary>点击查看 简单代码</summary><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">这里是注释</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">cron 0 8 * * * jbm.js</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> $</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;这里填脚本名或其他&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> notify</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./sendNotify&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ($.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">             await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> notify.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sendNotify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;这里是通知的标题&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">message</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 通知的内容 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">代表换行\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">logErr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">finally</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">done</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//固定模板 不要动</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;undefined&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> process</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(process.env).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">indexOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;GITHUB&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.env</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t}send(t,e=&quot;GET&quot;){t=&quot;string&quot;==typeof t?{url:t}:t;let s=this.get;return&quot;POST&quot;===e&amp;&amp;(s=this.post),new Promise((e,i)=&gt;{s.call(this,t,(t,s,r)=&gt;{t?i(t):e(s)})})}get(t){return this.send.call(this.env,t)}post(t){return this.send.call(this.env,t,&quot;POST&quot;)}}return new class{constructor(t,e){this.name=t,this.http=new s(this),this.data=null,this.dataFile=&quot;box.dat&quot;,this.logs=[],this.isMute=!1,this.isNeedRewrite=!1,this.logSeparator=&quot;\\n&quot;,this.startTime=(new Date).getTime(),Object.assign(this,e),this.log(&quot;&quot;,\`\\ud83d\\udd14\${this.name}, \\u5f00\\u59cb!\`)}isNode(){return&quot;undefined&quot;!=typeof module&amp;&amp;!!module.exports}isQuanX(){return&quot;undefined&quot;!=typeof $task}isSurge(){return&quot;undefined&quot;!=typeof $httpClient&amp;&amp;&quot;undefined&quot;==typeof $loon}isLoon(){return&quot;undefined&quot;!=typeof $loon}toObj(t,e=null){try{return JSON.parse(t)}catch{return e}}toStr(t,e=null){try{return JSON.stringify(t)}catch{return e}}getjson(t,e){let s=e;const i=this.getdata(t);if(i)try{s=JSON.parse(this.getdata(t))}catch{}return s}setjson(t,e){try{return this.setdata(JSON.stringify(t),e)}catch{return!1}}getScript(t){return new Promise(e=&gt;{this.get({url:t},(t,s,i)=&gt;e(i))})}runScript(t,e){return new Promise(s=&gt;{let i=this.getdata(&quot;@chavy_boxjs_userCfgs.httpapi&quot;);i=i?i.replace(/\\n/g,&quot;&quot;).trim():i;let r=this.getdata(&quot;@chavy_boxjs_userCfgs.httpapi_timeout&quot;);r=r?1*r:20,r=e&amp;&amp;e.timeout?e.timeout:r;const[o,h]=i.split(&quot;@&quot;),a={url:\`http://\${h}/v1/scripting/evaluate\`,body:{script_text:t,mock_type:&quot;cron&quot;,timeout:r},headers:{&quot;X-Key&quot;:o,Accept:&quot;*/*&quot;}};this.post(a,(t,e,i)=&gt;s(i))}).catch(t=&gt;this.logErr(t))}loaddata(){if(!this.isNode())return{};{this.fs=this.fs?this.fs:require(&quot;fs&quot;),this.path=this.path?this.path:require(&quot;path&quot;);const t=this.path.resolve(this.dataFile),e=this.path.resolve(process.cwd(),this.dataFile),s=this.fs.existsSync(t),i=!s&amp;&amp;this.fs.existsSync(e);if(!s&amp;&amp;!i)return{};{const i=s?t:e;try{return JSON.parse(this.fs.readFileSync(i))}catch(t){return{}}}}}writedata(){if(this.isNode()){this.fs=this.fs?this.fs:require(&quot;fs&quot;),this.path=this.path?this.path:require(&quot;path&quot;);const t=this.path.resolve(this.dataFile),e=this.path.resolve(process.cwd(),this.dataFile),s=this.fs.existsSync(t),i=!s&amp;&amp;this.fs.existsSync(e),r=JSON.stringify(this.data);s?this.fs.writeFileSync(t,r):i?this.fs.writeFileSync(e,r):this.fs.writeFileSync(t,r)}}lodash_get(t,e,s){const i=e.replace(/\\[(\\d+)\\]/g,&quot;.$1&quot;).split(&quot;.&quot;);let r=t;for(const t of i)if(r=Object(r)[t],void 0===r)return s;return r}lodash_set(t,e,s){return Object(t)!==t?t:(Array.isArray(e)||(e=e.toString().match(/[^.[\\]]+/g)||[]),e.slice(0,-1).reduce((t,s,i)=&gt;Object(t[s])===t[s]?t[s]:t[s]=Math.abs(e[i+1])&gt;&gt;0==+e[i+1]?[]:{},t)[e[e.length-1]]=s,t)}getdata(t){let e=this.getval(t);if(/^@/.test(t)){const[,s,i]=/^@(.*?)\\.(.*?)$/.exec(t),r=s?this.getval(s):&quot;&quot;;if(r)try{const t=JSON.parse(r);e=t?this.lodash_get(t,i,&quot;&quot;):e}catch(t){e=&quot;&quot;}}return e}setdata(t,e){let s=!1;if(/^@/.test(e)){const[,i,r]=/^@(.*?)\\.(.*?)$/.exec(e),o=this.getval(i),h=i?&quot;null&quot;===o?null:o||&quot;{}&quot;:&quot;{}&quot;;try{const e=JSON.parse(h);this.lodash_set(e,r,t),s=this.setval(JSON.stringify(e),i)}catch(e){const o={};this.lodash_set(o,r,t),s=this.setval(JSON.stringify(o),i)}}else s=this.setval(t,e);return s}getval(t){return this.isSurge()||this.isLoon()?$persistentStore.read(t):this.isQuanX()?$prefs.valueForKey(t):this.isNode()?(this.data=this.loaddata(),this.data[t]):this.data&amp;&amp;this.data[t]||null}setval(t,e){return this.isSurge()||this.isLoon()?$persistentStore.write(t,e):this.isQuanX()?$prefs.setValueForKey(t,e):this.isNode()?(this.data=this.loaddata(),this.data[e]=t,this.writedata(),!0):this.data&amp;&amp;this.data[e]||null}initGotEnv(t){this.got=this.got?this.got:require(&quot;got&quot;),this.cktough=this.cktough?this.cktough:require(&quot;tough-cookie&quot;),this.ckjar=this.ckjar?this.ckjar:new this.cktough.CookieJar,t&amp;&amp;(t.headers=t.headers?t.headers:{},void 0===t.headers.Cookie&amp;&amp;void 0===t.cookieJar&amp;&amp;(t.cookieJar=this.ckjar))}get(t,e=(()=&gt;{})){t.headers&amp;&amp;(delete t.headers[&quot;Content-Type&quot;],delete t.headers[&quot;Content-Length&quot;]),this.isSurge()||this.isLoon()?(this.isSurge()&amp;&amp;this.isNeedRewrite&amp;&amp;(t.headers=t.headers||{},Object.assign(t.headers,{&quot;X-Surge-Skip-Scripting&quot;:!1})),$httpClient.get(t,(t,s,i)=&gt;{!t&amp;&amp;s&amp;&amp;(s.body=i,s.statusCode=s.status),e(t,s,i)})):this.isQuanX()?(this.isNeedRewrite&amp;&amp;(t.opts=t.opts||{},Object.assign(t.opts,{hints:!1})),$task.fetch(t).then(t=&gt;{const{statusCode:s,statusCode:i,headers:r,body:o}=t;e(null,{status:s,statusCode:i,headers:r,body:o},o)},t=&gt;e(t))):this.isNode()&amp;&amp;(this.initGotEnv(t),this.got(t).on(&quot;redirect&quot;,(t,e)=&gt;{try{if(t.headers[&quot;set-cookie&quot;]){const s=t.headers[&quot;set-cookie&quot;].map(this.cktough.Cookie.parse).toString();this.ckjar.setCookieSync(s,null),e.cookieJar=this.ckjar}}catch(t){this.logErr(t)}}).then(t=&gt;{const{statusCode:s,statusCode:i,headers:r,body:o}=t;e(null,{status:s,statusCode:i,headers:r,body:o},o)},t=&gt;{const{message:s,response:i}=t;e(s,i,i&amp;&amp;i.body)}))}post(t,e=(()=&gt;{})){if(t.body&amp;&amp;t.headers&amp;&amp;!t.headers[&quot;Content-Type&quot;]&amp;&amp;(t.headers[&quot;Content-Type&quot;]=&quot;application/x-www-form-urlencoded&quot;),t.headers&amp;&amp;delete t.headers[&quot;Content-Length&quot;],this.isSurge()||this.isLoon())this.isSurge()&amp;&amp;this.isNeedRewrite&amp;&amp;(t.headers=t.headers||{},Object.assign(t.headers,{&quot;X-Surge-Skip-Scripting&quot;:!1})),$httpClient.post(t,(t,s,i)=&gt;{!t&amp;&amp;s&amp;&amp;(s.body=i,s.statusCode=s.status),e(t,s,i)});else if(this.isQuanX())t.method=&quot;POST&quot;,this.isNeedRewrite&amp;&amp;(t.opts=t.opts||{},Object.assign(t.opts,{hints:!1})),$task.fetch(t).then(t=&gt;{const{statusCode:s,statusCode:i,headers:r,body:o}=t;e(null,{status:s,statusCode:i,headers:r,body:o},o)},t=&gt;e(t));else if(this.isNode()){this.initGotEnv(t);const{url:s,...i}=t;this.got.post(s,i).then(t=&gt;{const{statusCode:s,statusCode:i,headers:r,body:o}=t;e(null,{status:s,statusCode:i,headers:r,body:o},o)},t=&gt;{const{message:s,response:i}=t;e(s,i,i&amp;&amp;i.body)})}}time(t){let e={&quot;M+&quot;:(new Date).getMonth()+1,&quot;d+&quot;:(new Date).getDate(),&quot;H+&quot;:(new Date).getHours(),&quot;m+&quot;:(new Date).getMinutes(),&quot;s+&quot;:(new Date).getSeconds(),&quot;q+&quot;:Math.floor(((new Date).getMonth()+3)/3),S:(new Date).getMilliseconds()};/(y+)/.test(t)&amp;&amp;(t=t.replace(RegExp.$1,((new Date).getFullYear()+&quot;&quot;).substr(4-RegExp.$1.length)));for(let s in e)new RegExp(&quot;(&quot;+s+&quot;)&quot;).test(t)&amp;&amp;(t=t.replace(RegExp.$1,1==RegExp.$1.length?e[s]:(&quot;00&quot;+e[s]).substr((&quot;&quot;+e[s]).length)));return t}msg(e=t,s=&quot;&quot;,i=&quot;&quot;,r){const o=t=&gt;{if(!t)return t;if(&quot;string&quot;==typeof t)return this.isLoon()?t:this.isQuanX()?{&quot;open-url&quot;:t}:this.isSurge()?{url:t}:void 0;if(&quot;object&quot;==typeof t){if(this.isLoon()){let e=t.openUrl||t.url||t[&quot;open-url&quot;],s=t.mediaUrl||t[&quot;media-url&quot;];return{openUrl:e,mediaUrl:s}}if(this.isQuanX()){let e=t[&quot;open-url&quot;]||t.url||t.openUrl,s=t[&quot;media-url&quot;]||t.mediaUrl;return{&quot;open-url&quot;:e,&quot;media-url&quot;:s}}if(this.isSurge()){let e=t.url||t.openUrl||t[&quot;open-url&quot;];return{url:e}}}};this.isMute||(this.isSurge()||this.isLoon()?$notification.post(e,s,i,o(r)):this.isQuanX()&amp;&amp;$notify(e,s,i,o(r)));let h=[&quot;&quot;,&quot;==============\\ud83d\\udce3\\u7cfb\\u7edf\\u901a\\u77e5\\ud83d\\udce3==============&quot;];h.push(e),s&amp;&amp;h.push(s),i&amp;&amp;h.push(i),console.log(h.join(&quot;\\n&quot;)),this.logs=this.logs.concat(h)}log(...t){t.length&gt;0&amp;&amp;(this.logs=[...this.logs,...t]),console.log(t.join(this.logSeparator))}logErr(t,e){const s=!this.isSurge()&amp;&amp;!this.isQuanX()&amp;&amp;!this.isLoon();s?this.log(&quot;&quot;,\`\\u2757\\ufe0f\${this.name}, \\u9519\\u8bef!\`,t.stack):this.log(&quot;&quot;,\`\\u2757\\ufe0f\${this.name}, \\u9519\\u8bef!\`,t)}wait(t){return new Promise(e=&gt;setTimeout(e,t))}done(t={}){const e=(new Date).getTime(),s=(e-this.startTime)/1e3;this.log(&quot;&quot;,\`\\ud83d\\udd14\${this.name}, \\u7ed3\\u675f! \\ud83d\\udd5b \${s} \\u79d2\`),this.log(),(this.isSurge()||this.isQuanX()||this.isLoon())&amp;&amp;$done(t)}}(t,e)}</span></span></code></pre></div></details><ul><li>完整版本</li></ul><p><code>$.msg($.name, message);</code> 表示调用系统通知（脚本名，消息）</p><p>message += <code>这是第1个数据\\n</code></p><p><code>+=</code> 表示消息累加 <code>\\n</code> 表示换行</p><details class="details custom-block"><summary>点击查看 完整版本代码</summary><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">这里是注释</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">这里是cron表达式</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">cron 0 8 * * * jbm.js</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//这里设定脚本名</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> $</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;这里填脚本名或其他&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//这里是调取青龙通知</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> notify</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./sendNotify&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> notifyFlag</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//0为关闭通知，1为打开通知,默认为1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //块作用域定义message变量</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//async 异步函数 常与await和function一起用</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> check</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//等待表达式 check只是演示 可以自己根据需求更改</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //通知体</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (notifyFlag </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		$.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">msg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($.name, message);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ($.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> notify.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sendNotify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($.name, message)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//以下3个是async函数的完整体 不要改</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">logErr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">finally</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">done</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//function函数 找到你想要的数据</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> check</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`这是第1个数据</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`这是第2个数据</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//固定模板 不要动</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;undefined&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> process</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(process.env).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">indexOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;GITHUB&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.env</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t}send(t,e=&quot;GET&quot;){t=&quot;string&quot;==typeof t?{url:t}:t;let s=this.get;return&quot;POST&quot;===e&amp;&amp;(s=this.post),new Promise((e,i)=&gt;{s.call(this,t,(t,s,r)=&gt;{t?i(t):e(s)})})}get(t){return this.send.call(this.env,t)}post(t){return this.send.call(this.env,t,&quot;POST&quot;)}}return new class{constructor(t,e){this.name=t,this.http=new s(this),this.data=null,this.dataFile=&quot;box.dat&quot;,this.logs=[],this.isMute=!1,this.isNeedRewrite=!1,this.logSeparator=&quot;\\n&quot;,this.startTime=(new Date).getTime(),Object.assign(this,e),this.log(&quot;&quot;,\`\\ud83d\\udd14\${this.name}, \\u5f00\\u59cb!\`)}isNode(){return&quot;undefined&quot;!=typeof module&amp;&amp;!!module.exports}isQuanX(){return&quot;undefined&quot;!=typeof $task}isSurge(){return&quot;undefined&quot;!=typeof $httpClient&amp;&amp;&quot;undefined&quot;==typeof $loon}isLoon(){return&quot;undefined&quot;!=typeof $loon}toObj(t,e=null){try{return JSON.parse(t)}catch{return e}}toStr(t,e=null){try{return JSON.stringify(t)}catch{return e}}getjson(t,e){let s=e;const i=this.getdata(t);if(i)try{s=JSON.parse(this.getdata(t))}catch{}return s}setjson(t,e){try{return this.setdata(JSON.stringify(t),e)}catch{return!1}}getScript(t){return new Promise(e=&gt;{this.get({url:t},(t,s,i)=&gt;e(i))})}runScript(t,e){return new Promise(s=&gt;{let i=this.getdata(&quot;@chavy_boxjs_userCfgs.httpapi&quot;);i=i?i.replace(/\\n/g,&quot;&quot;).trim():i;let r=this.getdata(&quot;@chavy_boxjs_userCfgs.httpapi_timeout&quot;);r=r?1*r:20,r=e&amp;&amp;e.timeout?e.timeout:r;const[o,h]=i.split(&quot;@&quot;),a={url:\`http://\${h}/v1/scripting/evaluate\`,body:{script_text:t,mock_type:&quot;cron&quot;,timeout:r},headers:{&quot;X-Key&quot;:o,Accept:&quot;*/*&quot;}};this.post(a,(t,e,i)=&gt;s(i))}).catch(t=&gt;this.logErr(t))}loaddata(){if(!this.isNode())return{};{this.fs=this.fs?this.fs:require(&quot;fs&quot;),this.path=this.path?this.path:require(&quot;path&quot;);const t=this.path.resolve(this.dataFile),e=this.path.resolve(process.cwd(),this.dataFile),s=this.fs.existsSync(t),i=!s&amp;&amp;this.fs.existsSync(e);if(!s&amp;&amp;!i)return{};{const i=s?t:e;try{return JSON.parse(this.fs.readFileSync(i))}catch(t){return{}}}}}writedata(){if(this.isNode()){this.fs=this.fs?this.fs:require(&quot;fs&quot;),this.path=this.path?this.path:require(&quot;path&quot;);const t=this.path.resolve(this.dataFile),e=this.path.resolve(process.cwd(),this.dataFile),s=this.fs.existsSync(t),i=!s&amp;&amp;this.fs.existsSync(e),r=JSON.stringify(this.data);s?this.fs.writeFileSync(t,r):i?this.fs.writeFileSync(e,r):this.fs.writeFileSync(t,r)}}lodash_get(t,e,s){const i=e.replace(/\\[(\\d+)\\]/g,&quot;.$1&quot;).split(&quot;.&quot;);let r=t;for(const t of i)if(r=Object(r)[t],void 0===r)return s;return r}lodash_set(t,e,s){return Object(t)!==t?t:(Array.isArray(e)||(e=e.toString().match(/[^.[\\]]+/g)||[]),e.slice(0,-1).reduce((t,s,i)=&gt;Object(t[s])===t[s]?t[s]:t[s]=Math.abs(e[i+1])&gt;&gt;0==+e[i+1]?[]:{},t)[e[e.length-1]]=s,t)}getdata(t){let e=this.getval(t);if(/^@/.test(t)){const[,s,i]=/^@(.*?)\\.(.*?)$/.exec(t),r=s?this.getval(s):&quot;&quot;;if(r)try{const t=JSON.parse(r);e=t?this.lodash_get(t,i,&quot;&quot;):e}catch(t){e=&quot;&quot;}}return e}setdata(t,e){let s=!1;if(/^@/.test(e)){const[,i,r]=/^@(.*?)\\.(.*?)$/.exec(e),o=this.getval(i),h=i?&quot;null&quot;===o?null:o||&quot;{}&quot;:&quot;{}&quot;;try{const e=JSON.parse(h);this.lodash_set(e,r,t),s=this.setval(JSON.stringify(e),i)}catch(e){const o={};this.lodash_set(o,r,t),s=this.setval(JSON.stringify(o),i)}}else s=this.setval(t,e);return s}getval(t){return this.isSurge()||this.isLoon()?$persistentStore.read(t):this.isQuanX()?$prefs.valueForKey(t):this.isNode()?(this.data=this.loaddata(),this.data[t]):this.data&amp;&amp;this.data[t]||null}setval(t,e){return this.isSurge()||this.isLoon()?$persistentStore.write(t,e):this.isQuanX()?$prefs.setValueForKey(t,e):this.isNode()?(this.data=this.loaddata(),this.data[e]=t,this.writedata(),!0):this.data&amp;&amp;this.data[e]||null}initGotEnv(t){this.got=this.got?this.got:require(&quot;got&quot;),this.cktough=this.cktough?this.cktough:require(&quot;tough-cookie&quot;),this.ckjar=this.ckjar?this.ckjar:new this.cktough.CookieJar,t&amp;&amp;(t.headers=t.headers?t.headers:{},void 0===t.headers.Cookie&amp;&amp;void 0===t.cookieJar&amp;&amp;(t.cookieJar=this.ckjar))}get(t,e=(()=&gt;{})){t.headers&amp;&amp;(delete t.headers[&quot;Content-Type&quot;],delete t.headers[&quot;Content-Length&quot;]),this.isSurge()||this.isLoon()?(this.isSurge()&amp;&amp;this.isNeedRewrite&amp;&amp;(t.headers=t.headers||{},Object.assign(t.headers,{&quot;X-Surge-Skip-Scripting&quot;:!1})),$httpClient.get(t,(t,s,i)=&gt;{!t&amp;&amp;s&amp;&amp;(s.body=i,s.statusCode=s.status),e(t,s,i)})):this.isQuanX()?(this.isNeedRewrite&amp;&amp;(t.opts=t.opts||{},Object.assign(t.opts,{hints:!1})),$task.fetch(t).then(t=&gt;{const{statusCode:s,statusCode:i,headers:r,body:o}=t;e(null,{status:s,statusCode:i,headers:r,body:o},o)},t=&gt;e(t))):this.isNode()&amp;&amp;(this.initGotEnv(t),this.got(t).on(&quot;redirect&quot;,(t,e)=&gt;{try{if(t.headers[&quot;set-cookie&quot;]){const s=t.headers[&quot;set-cookie&quot;].map(this.cktough.Cookie.parse).toString();this.ckjar.setCookieSync(s,null),e.cookieJar=this.ckjar}}catch(t){this.logErr(t)}}).then(t=&gt;{const{statusCode:s,statusCode:i,headers:r,body:o}=t;e(null,{status:s,statusCode:i,headers:r,body:o},o)},t=&gt;{const{message:s,response:i}=t;e(s,i,i&amp;&amp;i.body)}))}post(t,e=(()=&gt;{})){if(t.body&amp;&amp;t.headers&amp;&amp;!t.headers[&quot;Content-Type&quot;]&amp;&amp;(t.headers[&quot;Content-Type&quot;]=&quot;application/x-www-form-urlencoded&quot;),t.headers&amp;&amp;delete t.headers[&quot;Content-Length&quot;],this.isSurge()||this.isLoon())this.isSurge()&amp;&amp;this.isNeedRewrite&amp;&amp;(t.headers=t.headers||{},Object.assign(t.headers,{&quot;X-Surge-Skip-Scripting&quot;:!1})),$httpClient.post(t,(t,s,i)=&gt;{!t&amp;&amp;s&amp;&amp;(s.body=i,s.statusCode=s.status),e(t,s,i)});else if(this.isQuanX())t.method=&quot;POST&quot;,this.isNeedRewrite&amp;&amp;(t.opts=t.opts||{},Object.assign(t.opts,{hints:!1})),$task.fetch(t).then(t=&gt;{const{statusCode:s,statusCode:i,headers:r,body:o}=t;e(null,{status:s,statusCode:i,headers:r,body:o},o)},t=&gt;e(t));else if(this.isNode()){this.initGotEnv(t);const{url:s,...i}=t;this.got.post(s,i).then(t=&gt;{const{statusCode:s,statusCode:i,headers:r,body:o}=t;e(null,{status:s,statusCode:i,headers:r,body:o},o)},t=&gt;{const{message:s,response:i}=t;e(s,i,i&amp;&amp;i.body)})}}time(t){let e={&quot;M+&quot;:(new Date).getMonth()+1,&quot;d+&quot;:(new Date).getDate(),&quot;H+&quot;:(new Date).getHours(),&quot;m+&quot;:(new Date).getMinutes(),&quot;s+&quot;:(new Date).getSeconds(),&quot;q+&quot;:Math.floor(((new Date).getMonth()+3)/3),S:(new Date).getMilliseconds()};/(y+)/.test(t)&amp;&amp;(t=t.replace(RegExp.$1,((new Date).getFullYear()+&quot;&quot;).substr(4-RegExp.$1.length)));for(let s in e)new RegExp(&quot;(&quot;+s+&quot;)&quot;).test(t)&amp;&amp;(t=t.replace(RegExp.$1,1==RegExp.$1.length?e[s]:(&quot;00&quot;+e[s]).substr((&quot;&quot;+e[s]).length)));return t}msg(e=t,s=&quot;&quot;,i=&quot;&quot;,r){const o=t=&gt;{if(!t)return t;if(&quot;string&quot;==typeof t)return this.isLoon()?t:this.isQuanX()?{&quot;open-url&quot;:t}:this.isSurge()?{url:t}:void 0;if(&quot;object&quot;==typeof t){if(this.isLoon()){let e=t.openUrl||t.url||t[&quot;open-url&quot;],s=t.mediaUrl||t[&quot;media-url&quot;];return{openUrl:e,mediaUrl:s}}if(this.isQuanX()){let e=t[&quot;open-url&quot;]||t.url||t.openUrl,s=t[&quot;media-url&quot;]||t.mediaUrl;return{&quot;open-url&quot;:e,&quot;media-url&quot;:s}}if(this.isSurge()){let e=t.url||t.openUrl||t[&quot;open-url&quot;];return{url:e}}}};this.isMute||(this.isSurge()||this.isLoon()?$notification.post(e,s,i,o(r)):this.isQuanX()&amp;&amp;$notify(e,s,i,o(r)));let h=[&quot;&quot;,&quot;==============\\ud83d\\udce3\\u7cfb\\u7edf\\u901a\\u77e5\\ud83d\\udce3==============&quot;];h.push(e),s&amp;&amp;h.push(s),i&amp;&amp;h.push(i),console.log(h.join(&quot;\\n&quot;)),this.logs=this.logs.concat(h)}log(...t){t.length&gt;0&amp;&amp;(this.logs=[...this.logs,...t]),console.log(t.join(this.logSeparator))}logErr(t,e){const s=!this.isSurge()&amp;&amp;!this.isQuanX()&amp;&amp;!this.isLoon();s?this.log(&quot;&quot;,\`\\u2757\\ufe0f\${this.name}, \\u9519\\u8bef!\`,t.stack):this.log(&quot;&quot;,\`\\u2757\\ufe0f\${this.name}, \\u9519\\u8bef!\`,t)}wait(t){return new Promise(e=&gt;setTimeout(e,t))}done(t={}){const e=(new Date).getTime(),s=(e-this.startTime)/1e3;this.log(&quot;&quot;,\`\\ud83d\\udd14\${this.name}, \\u7ed3\\u675f! \\ud83d\\udd5b \${s} \\u79d2\`),this.log(),(this.isSurge()||this.isQuanX()||this.isLoon())&amp;&amp;$done(t)}}(t,e)}</span></span></code></pre></div></details></details><h2 id="常见问题" tabindex="-1">常见问题 <a class="header-anchor" href="#常见问题" aria-label="Permalink to &quot;常见问题&quot;">​</a></h2><p>1.拉不了库</p><p>要么是库的问题，要么是代理的问题，github被墙很正常</p><p>解决：手动下载 - 上传 - 然后解压到 <code>/root/ql/repo</code> 或 <code>SSH下载</code></p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#ssh下载</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /roott/ql/repo</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#下载并解压</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wget</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://codeload.github.com/shufflewzc/faker3/zip/refs/heads/main.zip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unzip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main.zip</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#改名</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> shufflewzc_faker3</span></span></code></pre></div><p>2.忘记青龙面板密码</p><p>若密码忘了，在终端用代码查看</p><div class="tip custom-block"><p class="custom-block-title">说明</p><p>password是密码</p><p>宝塔目录下 <code>root/ql/config/auth.json</code> 也可查看</p></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /root/ql/config/auth.json</span></span></code></pre></div>`,88)]))}const _=i(C,[["render",b]]);export{w as __pageData,_ as default};
